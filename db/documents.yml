---
root:
- :title: About
  :reverse_html_title: true
  :body: |
    The goal of LCBO API is to provide developers, hobbyists, and anyone who is
    interested with a way to create applications that take advantage of the
    unique benefits that come from having a single provider of alcoholic
    beverages in a large geographical area.

    ### Usage

    The API is primarily designed to provide JSON data directly to mobile and
    web applications, but it is also capable of returning CSV data to be used
    directly in a spreadsheet application.

    Here are some examples of real-world applications:

     * [LCBO Search](http://lcbosearch.com) by Carsten Nielsen [Web App]
     * [Liquor, ON](http://hippofoundry.com/lcbo/) by Taylan Pince [iPhone App]

    If you plan on performing hundreds of queries per second for uses such as
    data analysis then you should download the latest [dataset](/docs/dataset)
    and perform these operations offline. The datasets contain CSV data, if
    you need a different format please ask.

    ### Contact

    I would love to hear about how you are using the data or API. I would also
    love to hear from you if you want to do something with the data but are not
    sure how to get started. You can reach me through
    [Twitter](http://twitter.com/heycarsten), and by
    [email](mailto:heycarsten@gmail.com).

- :title: Conventions
  :body: |
    ### Responses

    The default response format for the API is JSON. This means that you don't
    need to specify JSON in an `Accept` header or as an extension (.json) if
    that is the format you intend to request. Every response from the API is
    wrapped in a "container" that in its most basic form looks like this:

        {
          "status": 200,
          "message": null,
          "result": ...
        }

    This allows the API to return meta information along with the data you are
    requesting. For example, in the case of a
    [Stores with Product](/docs/stores-with-product) request the product object
    is returned with list of stores so that your application does not need to
    perform an additional request to obtain store information.

    ### JSON-P

    JSON-P stands for "JSON with padding" which is a very confusing way of
    saying JSON wrapped in a Javascript function call; I like to think of it as
    JSON-JS. It is used to circumvent browser security limitations when trying
    to access resources via Javascript from a different host than the containing
    page. That means you can use it to load LCBO API resources on a page that is
    not hosted on lcboapi.com, such as your website!

    One of the limitations to JSON-P is that the HTTP status can not be properly
    set to an error level because the `<script>` element that is dynamically
    written to the page will fail to load. Because of this all JSON-P requests
    return a 200 HTTP status code, regardless of the actual status. However, the
    `"status"` node in the response container always indicates the real status.

    To use JSON-P simply provide a `callback` parameter to your query. For
    example, to search products and return JSON-P you would request:

    <pre><code>/products?q=cider&<em>callback=</em>setJSON
    </code></pre>

    This will return the normal JSON response but wrap it in a function call:

    <pre><code><em>setJSON(</em>{"status":200, "message":null, "response": ...}<em>);</em>
    </code></pre>

    You can optionally specify a `.js` file extension for the resource, but the
    `Content-Type` header will always be set to `text/javascript` when returning
    JSON-P. For example the following request URI is the same as the one above.

    <pre><code>/products<em>.js</em>?q=cider&callback=setJSON
    </code></pre>

    ### Pagination

    When the API returns collections of items (stores, products, or inventories)
    it will paginate the results. You can control the number of items per page
    through the `per_page` parameter.

    A typical pager object looks like this:

        {
          "records_per_page": 20,
          "total_record_count": 608,
          "current_page_record_count": 20,
          "is_first_page": false,
          "is_final_page": false,
          "current_page": 5,
          "current_page_path": "/stores?page=5",
          "next_page": 6,
          "next_page_path": "/stores?page=6",
          "previous_page": 4,
          "previous_page_path": "/stores?page=4",
          "final_page": 31,
          "final_page_path": "/stores?page=31"
        }

    It contains all of the information you need (and more) to navigate through
    the pages in the result set.

    ### CSV and TSV Responses

    Many resources can be returned as CSV (comma separated values) or TSV
    (tab separated values). These results can then be easily imported into
    spreadsheet software such as Apple Numbers or Microsoft Excel. To return
    a resource in CSV or TSV format simply append the `.csv` or `.tsv`
    extension to the resource URI:

    <pre><code>/products<em>.csv</em>?order=price_in_cents.desc
    </code></pre>

    ### Errors

    When an error occurs the response will look something like this:

        {
          "error": "bad_query_error",
          "message": "A value supplied for the order parameter (id.desk) is not valid. It contains an invalid sort order (desk) for (id) try using: id.desc or id.asc instead.",
          "result": null,
          "status": 400
        }

    Error messages are always as descriptive as possible; one of the design
    goals for LCBO API is to make experiential learning (learning by trial and
    error) as easy as possible. There are a few different types of errors:

     * `no_results_error`: The geocoder returned no geometry for the geo query.
     * `over_limit_error`: The geocoder has reached its daily limit of requests.
     * `geocoder_error`: The geocoder can't geocode the query it was provided.
     * `not_found_error`: A resource was not found (404)
     * `bad_query_error`: One (or more) of the supplied query parameters is
       wrong.
     * `jsonp_error`: Supplied callback is not a valid format, or JSON-P is not
       being used correctly.

- :title: Frequently Asked Questions
  :menu: FAQ
  :body: |
    ### Is it free?

    Absolutely! There is no desire or intention to charge for the use of the
    API. I only ask that you tell me about what you are making with it. It costs
    roughly $50/month to host the project, donations are greatly appreciated!

    ### Where does the data come from?

    Why, from the LCBO of course! Their website is periodically crawled to get
    up-to-date information. Search engines like Google and Bing use this same
    technique to index web pages.

    ### Why did you do this?

    I feel that publicly available information should be free and accessible in
    as many ways as possible. I want to see what individuals will do with this
    information when presented with it in an accessible format... and I wanted
    an LCBO app for my iPhone. Read the [about section](/docs/about) for more
    information.

    ### Can you add barcode information products, please?

    I do not currently have access to barcode information for all products that
    the LCBO stocks. I understand how useful barcode data would be for products
    and if this ever changes it will certainly be announced on
    [@lcboapi](http://twitter.com/lcboapi)'s Twitter account.

    ### Can you add XML as a response format?

    No, because [JSON](http://www.json.org/xml.html) is a much better format for
    the output of this API.

    ### I'm a geek, how does it work?

    * [Ruby](http://tryruby.org)
    * [Rails](http://rubyonrails.org)
    * [Redis](http://redis.io)
    * [Postgres](http://postgresql.org)

    ### Is it open source?

    The [parser](http://github.com/heycarsten/lcbo) is open source, my intention
    is to eventually open source the API service too in the future. Here are
    the current open source contributions:

    * [LCBO](http://github.com/heycarsten/lcbo) - HTML Parser
    * [GCoder](http://github.com/heycarsten/gcoder) - Geocoding

Dataset Endpoints:
- :title: Datasets
  :query: DatasetsQuery
  :route: /datasets
  :formats: &all_formats
    :json: JSON (default format if no extension is supplied)
    :js: Javascript (for use with JSON-P, requires <code>callback</code> parameter)
    :csv: Comma Separated Values
    :tsv: Tab Separated Values
  :params:
    - :defaults
  :examples:
  - :path: /datasets
    :desc: Page all datasets
  :body: |
    Returns [datasets](/docs/dataset).

- :title: Dataset
  :route: /datasets/:dataset_id
  :formats:
    <<: *all_formats
    :zip: ZIP archive of all data (redirects to actual file)
  :examples:
  - :path: /datasets/1
    :desc: Get a specific dataset
  :body: |
    Datasets represent snapshots of all stores, products, and inventories at a
    given time. They are created once per day and contain information such as
    the IDs of stores and products that were added and removed since the
    previous dataset.
  :pairs:
    id: Dataset identifier
    total_products: Total unique retail products across all stores
    total_stores: Total stores
    total_inventories: Total inventory items across all stores
    total_product_inventory_count: Total product units across all stores
    total_product_inventory_volume_in_milliliters: Total volume of all product units across all stores
    total_product_inventory_price_in_cents: Total retail value of all product units across all stores
    created_at: The time the dataset was created
    product_ids: List of all active product IDs at the time the dataset was created
    store_ids: List of all active store IDs at the time the dataset was created
    added_product_ids: List of product IDs that were added since the previous update
    added_store_ids: List of store IDs that were added since the previous update
    removed_product_ids: List of product IDs that were removed since the previous update
    removed_store_ids: List of store IDs that were removed since the previous update
    csv_dump: Contains a path to a ZIP archive of CSV files for stores, products, and inventories.
- :title: Latest Dataset
  :route: /datasets/latest
  :formats:
    <<: *all_formats
    :zip: ZIP archive of all data (redirects to actual file)
  :examples:
  - :path: /datasets/latest
    :desc: Get the latest dataset
  :body:
    Retuns the latest [dataset](/docs/dataset)

Product Endpoints:
- :title: Products
  :route: /products
  :query: ProductsQuery
  :formats:
    <<: *all_formats
  :params:
    - :defaults
    - :q
  :examples:
  - :path: /products
    :desc: All products
  - :path: /products?q=waupoos
    :desc: Full-text search
  - :path: /products?geo=queen+and+spadina
    :desc: Geospatial search
  - :path: /products?where=is_vqa&order=released_on.desc
    :desc: All VQA products ordered by release date
  :body: |
    Returns [products](/docs/product).

- :title: Product
  :route: /products/:product_id
  :formats:
    <<: *all_formats
  :examples:
  - :path: /products/18
    :desc: Show product 18
  :pairs:
    alcohol_content: Alcohol content (Divide by 100 for decimal value)
    bonus_reward_miles: Number of bonus air miles
    bonus_reward_miles_ends_on: When bonus air miles are no longer valid
    clearance_sale_savings_in_cents: Savings in cents if on clearance
    description: Product description (not available for all products)
    has_bonus_reward_miles: True if the product has bonus air miles
    has_clearance_sale: True if the product is currently on clearance
    has_limited_time_offer: True if the product is on sale
    has_value_added_promotion: True if the product has a value added promotion
    id: The LCBO product ID / number
    inventory_count: Total units across all stores
    inventory_price_in_cents: Total retail price of all units across all stores
    inventory_volume_in_milliliters: Total volume of all units across all stores
    is_dead: When products are removed from the catalog they are marked as "dead"
    is_discontinued: True if the product has been marked as discontinued
    is_kosher: True if the product is designated as Kosher.
    is_seasonal: True if the product is designated as seasonal
    is_vqa: True if the product is designated as VQA
    limited_time_offer_ends_on: When the sale price is no longer valid
    limited_time_offer_savings_in_cents: Savings in cents if on sale
    name: Product name
    origin: Country of origin / manufacture
    package: Full package description
    package_unit_type: Package unit type (bottle, can, etc.)
    package_unit_volume_in_milliliters: The volume of one unit in the package
    price_in_cents: Current retail price in cents
    price_per_liter_in_cents: The beverage price per liter
    price_per_liter_of_alcohol_in_cents: The alcohol price per liter
    primary_category: Primary product category
    producer_name: Name of the company that produces the product
    product_no: The LCBO product ID / number [Deprecated]
    regular_price_in_cents: Regular retail price in cents
    released_on: Official release date (usually unspecified)
    secondary_category: Secondary LCBO product category (Not available for all products)
    serving_suggestion: LCBO serving suggestion (Not available for all products)
    style: The LCBO's determined style designation (Not available for most products)
    tertiary_category: Tertiary LCBO product category (Not available for all products)
    image_url: A URL to an image of the product (Not available for all products)
    image_thumb_url: A URL to a smaller image of the product (Not available for all products)
    stock_type: Either "LCBO" or "VINTAGES"
    sugar_content: The product's sweetness descriptor, is usually a designation such as extra-dry (XD), medium sweet (MS), etc. (Not available for all products)
    sugar_in_grams_per_liter: The amount of sugar that is contained in the product in grams per liter. (Not available for all products)
    tags: A string of tags that reflect the product
    tasting_note: Professional tasting note (Not available for all products)
    total_package_units: Number of units in a package
    updated_at: Time that the product information was updated
    value_added_promotion_description: Contents of the value added promotion offer if available
    varietal: Grape varietal (or blend) designated by the LCBO (Not available for all products)
    volume_in_milliliters: Total volume of all units in package
  :body:
    Represents an LCBO product.

- :title: Products at Store
  :route: /stores/:store_id/products
  :query: ProductsQuery
  :formats:
    <<: *all_formats
  :params:
    - :defaults
    - :q
  :examples:
  - :path: /stores/511/products
    :desc: All products available at store 511
  - :path: /stores/511/products?where=is_vqa
    :desc: All VQA products at store 511
  :body: |
    Returns all [products](/docs/product) that are available at the specified
    store along with the currenty reported inventory quantity for each.

Store Endpoints:
- :title: Stores with Product
  :route: /products/:product_id/stores
  :query: StoresQuery
  :formats:
    <<: *all_formats
  :params:
  - :defaults
  - :geo
  - :q
  :examples:
  - :path: /products/18/stores
    :desc: Stores that stock product 18
  :body: |
    Returns all of the [stores](/docs/store) that carry the specified product
    along with the quantity that each store currently has in stock.

- :title: Stores
  :route: /stores
  :query: StoresQuery
  :formats:
    <<: *all_formats
  :params:
  - :defaults
  - :geo
  - :q
  :examples:
  - :path: /stores
    :desc: All stores
  :body: |
    Returns [stores](/docs/store).

- :title: Store
  :route: /stores/:store_id
  :formats:
    <<: *all_formats
  :examples:
  - :path: /stores/511
    :desc: Store 511
  :pairs:
    address_line_1: Street address
    address_line_2: Secondary address information (Not all stores)
    city: City the store is in
    fax: Fax number (not all stores have one)
    has_beer_cold_room: True if the store has a walk-in beer fridge
    has_bilingual_services: True if the store has bilingual services
    has_parking: True if the store has a parking lot
    has_product_consultant: True if the store has a product consultant on staff
    has_special_occasion_permits: True if the store can issue special occasion permits
    has_tasting_bar: True if the store has a tasting bar
    has_transit_access: True if the store is accessible by public transit
    has_vintages_corner: True if the store has a Vintages area
    has_wheelchair_accessability: True if the store can be entered via wheelchair
    id: LCBO store number
    inventory_count: Total inventory units at the store
    inventory_price_in_cents: Total retail value of all products at the store
    inventory_volume_in_milliliters: Total volume of all products at the store
    is_dead: When a store is removed it is marked as "dead"
    latitude: Reported latitude
    longitude: Reported longitude
    name: Official LCBO store name
    postal_code: Postal code
    products_count: Total unique products at the store
    store_no: LCBO store number [Deprecated]
    "[sunday..monday]_close": Minutes since midnight that the store closes
    "[sunday..monday]_open": Minutes since midnight that the store opens
    tags: A string of tags that reflect the store
    telephone: Telephone number
    updated_at: Time that the store information was updated
  :body: |
    Minutes since midnight can be easily converted into 24 hour time. To get
    the clock hour, divide the minutes since midnight by 60. To get the minute
    value, mod the number by 60. Here is some example Javascript that
    demonstrates how to perform the calculation:

        function msmTo24time(msm) {
          var hour = msm / 60;
          var mins = msm % 60;
          return [hour, mins];
        }

    You will probably want to convert the minutes since midnight to 12 hour time
    since that's what most folks from Ontario will be familiar with, you can do
    that with a few extra steps:

        function msmTo12time(msm) {
          var time = msmTo24time(msm),
              h24  = time[0],
              h12  = (0 == h24 ? 12 : (h24 > 12 ? (h24 - 10) - 2 : h24)),
              ampm = (h24 >= 12 ? 'PM' : 'AM');
          return [h12, time[1], ampm];
        }

Inventory Endpoints:
- :title: Inventories
  :route: /inventories
  :query: InventoriesQuery
  :params:
  - :defaults
  :formats:
    <<: *all_formats
  :examples:
  - :path: /inventories
    :desc: All inventories
  :body: |
    Returns [inventory](/docs/inventory) items.

- :title: Inventory
  :route: /stores/:store_id/products/:product_id/inventory
  :formats:
    <<: *all_formats
  :examples:
  - :path: /stores/511/products/18/inventory
    :desc: Inventory of product 18 at store 511
  :pairs:
    product_id: Product ID
    store_id: Store ID
    is_dead: True if this inventory refers to a dead store and/or product
    quantity: Reported quantity on hand of the product ID at store ID
    updated_on: Reported date that quantity was updated
    updated_at: Time that this inventory item was updated
    product_no: Product ID [Deprecated]
    store_no: Store ID [Deprecated]
  :body: |
    An inventory reflects the quantity of a product at a store, the
    reported quantity is an estimate, quantities for seasonal and discontinued
    products are also often inaccurate due to increased demand. This result
    includes store and product resources as well.

- :title: Product Inventories
  :route: /products/:product_id/inventories
  :query: InventoriesQuery
  :params:
  - :defaults
  :formats:
    <<: *all_formats
  :examples:
  - :path: /products/18/inventories
    :desc: All inventories for product 18
  :body: |
    Returns [inventories](/docs/inventory) for the specified product.
