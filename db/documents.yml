---
Information:
- :title: Introduction
  :body: |
    LCBO API was created by me, [Carsten Nielsen](http://heycarsten.com),
    a software developer from [Unspace Interactive](http://unspace.ca) in
    Toronto, Canada. I built it from the ground up using my favorite tools, you
    can about that in the [FAQ](/docs/faq).
    
    The goal of LCBO API is to provide developers with an easy way to create
    intelligent applications that take advantage of the unique benefits
    that come from having a single provider of alcoholic beverages in a large
    geographical area.
    
    ### Usage
    
    The API is intended to provide data to mobile and web applications. Here are
    some examples of real applications that use the API:
    
     * [LCBO Search](http://lcbosearch.com) by Carsten Nielsen [Web App]
     * [Liquor, ON](http://hippofoundry.com/lcbo/) by Taylan Pince [iPhone App]
    
    If you plan on performing hundreds of queries per second for uses such as
    data analysis then you should download the latest [dataset](/docs/dataset)
    and perform these operations offline. Let me know what you do, I'd love to
    know!
    
    ### Contact
    
    I would love to hear about how you are using the data or API. I would also
    love to hear from you if you want to do something with the data but are not
    sure how to get started. You can reach me through
    [Twitter](http://twitter.com/heycarsten), and by
    [email](mailto:heycarsten@gmail.com).

- :title: Frequently Asked Questions
  :menu: FAQ
  :body: |
    ### Is it free?
    
    Absolutely! There is no desire or intention to charge for the use of the
    API. I only ask that you tell me about what you are making with it. It costs
    roughly $50/month to host the project,
    [donations](http://www.pledgie.com/campaigns/8126) are very helpful.
    
    ### Where does the data come from?
    
    Why, from the LCBO of course! Their website is periodically crawled to get
    up-to-date information. Search engines like Google use this same technique
    to index web pages.
    
    ### Why did you do this?
    
    I feel that publicly available information should be free and accessible in
    as many ways as possible. I want to see what individuals will do with this
    information when presented with it in an accessible format. And I wanted
    an LCBO app for my iPhone.
    
    ### How does it work?
    
    * [Ruby 1.9.2](http://tryruby.org)
    * [RVM](http://rvm.beginrescueend.com)
    * [Rails 3](http://rubyonrails.org)
    * [Sequel](http://sequel.rubyforge.org)
    * [Redis](http://redis.io)
    * [Postgres](http://postgresql.org)
    * [Nginx](http://wiki.nginx.org/Main)
    * [Linode](http://linode.com)
    
    ### Is it open source?
    
    The [parser](http://github.com/heycarsten/lcbo) is open source, my intention
    is to eventually open source the API service too in the future. Here are
    the current open source contributions:
    
    * [LCBO](http://github.com/heycarsten/lcbo) - HTML Parser
    * [GCoder](http://github.com/heycarsten/gcoder) - Geocoding
    
- :title: API Conventions
  :body: |
    ### JSON Responses
    
    Every response from the API is wrapped in a "container" that in it's most
    basic form looks like this:
    
        {
          "status": 200,
          "message": null,
          "result": ...
        }
    
    This allows the API to return meta-level information along with the data you
    are requesting. For example, in the case of a Stores with Product request
    the product object is returned with list of stores so that your application
    does not need to perform two requests. 
    
    ### Errors

    When an error occurs the response will look like this:
    
        {
          "error": "bad_query_error",
          "message": "A value supplied for the order parameter (id.desk) is not valid. It contains an invalid sort order (desk) for (id) try using: id.desc or id.asc instead.",
          "result": null,
          "status": 400
        }
    
    Error messages are always as descriptive as possible, one of the design
    goals for LCBO API was to make it as easy as possible to learn by trial and
    error. There are a few different types of errors:
    
     * `no_results_error`: The geocoder returned no geometry for the geo query.
     * `over_limit_error`: The geocoder has reached its daily limit of requests.
     * `geocoder_error`: The geocoder can't geocode the query it was provided.
     * `not_found_error`: A resource was not found (404)
     * `bad_query_error`: One (or more) of the supplied query parameters is wrong.
    
    ### Pagination
    
    When the API returns collections of items (stores, products, or inventories)
    it will paginate the results. You can control the number of items per page
    through the `per_page` parameter.
    
    A typical pager object looks like this:
    
        {
          "records_per_page": 20,
          "total_record_count": 608,
          "current_page_record_count": 20,
          "is_first_page": false,
          "is_final_page": false,
          "current_page": 5,
          "current_page_path": "/stores?page=5",
          "next_page": 6,
          "next_page_path": "/stores?page=6",
          "previous_page": 4,
          "previous_page_path": "/stores?page=4",
          "final_page": 31,
          "final_page_path": "/stores?page=31"
        }
    
    It contains all of the information you need, plus more to navigate through
    the pages in the result set.
    
    ### JSON-P
    
    JSON-P stands for "JSON with padding" which is a very confusing way of
    saying JSON wrapped in a Javascript function call. It is used to circumvent
    browser security limitations when trying to access resources via Javascript
    from a different host than the containing page.
    
    One of the limitations to JSON-P is that the HTTP status can not be properly
    set to an error level because the `<script>` element that is dynamically
    written to the page will fail to load. Because of this all JSON-P requests
    return a 200 status code, regardless of actual HTTP status. The "status"
    node in the response container remains the proper value though.

Dataset Resources:
- :title: Datasets
  :route: /datasets
  :params:
    :where: Filter results where these fields are true
    :where_not: Filter results where these fields are false
    :order: Order by this field
  :examples:
  - :path: /datasets
    :desc: Page all datasets
  :body:

- :title: Dataset
  :route: /datasets/:dataset_id
  :examples:
  - :path: /datasets/1
    :desc: Get a specific dataset
  :body: |
    Datasets represent snapshots of all stores, products, and inventories at a
    given time. They are created once per day and contain information such as
    the IDs of stores and products that were added and removed since the
    previous dataset.
  :pairs:
    id: Dataset identifier
    total_products: Total unique retail products across all stores
    total_stores: Total stores
    total_inventories: Total inventory items across all stores
    total_product_inventory_count: Total product units across all stores
    total_product_inventory_volume_in_milliliters: Total volume of all product units across all stores
    total_product_inventory_price_in_cents: Total retail value of all product units across all stores
    created_at: The time the dataset was created
    product_ids: List of all active product IDs at the time the dataset was created
    store_ids: List of all active store IDs at the time the dataset was created
    added_product_ids: List of product IDs that were added since the previous update
    added_store_ids: List of store IDs that were added since the previous update
    removed_product_ids: List of product IDs that were removed since the previous update
    removed_store_ids: List of store IDs that were removed since the previous update
    csv_dump: Contains a path to a ZIP archive of CSV files for stores, products, and inventories.

Product Resources:
- :title: Products
  :route: /products
  :params:
    :where, where_not: |
      `where` filters products where the supplied fields are true. `where_not`
      filters products where the supplied fields are false. The available fields
      are:
      
      `<%= QueryHelper::ProductsQuery.filterable_fields.join(', ') %>`
      
      The following example would find seasonal VQA products that are not discontinued:
      
      `/products?where=is_vqa,is_seasonal&where_not=is_discontinued`
    :order: |
      Orders the results by a specified field in ascending or descending order.
      Available fields are:
      
      `<%= QueryHelper::ProductsQuery.sortable_fields.join(', ') %>`
      
      The following example sorts products by release date:
      
      `/products?order=released_on.desc`
    :page: |
      The page number to return. See "pager" in the response object for more
      information.
    :per_page: |
      The number of objects to include per page. Minimum is 5, maximum is 100.
    :q: |
      URI-encoded full text search query. Examples: "merlot", "molson+beer".
  :examples:
  - :path: /products?q=waupoos
    :desc: Full text product search for "waupoos"
  - :path: /products?geo=queen+and+spadina
    :desc: Geospatial search on products near "queen and spadina"
  - :path: /products
    :desc: Page through all products
  - :path: /products?where=is_vqa&order=released_on.desc
    :desc: Page through all VQA products ordered by release date
  :body: |
    

- :title: Product
  :route: /products/:product_id
  :examples:
  - :path: /products/18
    :desc: Show product #18
  :pairs:
    alcohol_content: Alcohol content (Divide by 100 for decimal value)
    bonus_reward_miles: Number of bonus air miles
    bonus_reward_miles_ends_on: When bonus air miles are no longer valid
    description: Product description (not available for all products)
    has_bonus_reward_miles: True if the product has bonus air miles
    has_limited_time_offer: True if the product is on sale
    has_value_added_promotion: True if the product has a value added promotion
    id: The LCBO product ID / number
    inventory_count: Total units across all stores
    inventory_price_in_cents: Total retail price of all units across all stores
    inventory_volume_in_milliliters: Total volume of all units across all stores
    is_dead: When products are removed from the catalog they are marked as "dead"
    is_discontinued: True if the product has been marked as discontinued
    is_kosher: True if the product is designated as Kosher.
    is_seasonal: True if the product is designated as seasonal
    is_vqa: True if the product is designated as VQA
    limited_time_offer_ends_on: When the sale price is no longer valid
    limited_time_offer_savings_in_cents: Savings in cents if on sale
    name: Product name
    origin: Country of origin / manufacture
    package: Full package description
    package_unit_type: Package unit type (bottle, can, etc.)
    package_unit_volume_in_milliliters: The volume of one unit in the package
    price_in_cents: Current retail price in cents
    price_per_liter_in_cents: The beverage price per liter
    price_per_liter_of_alcohol_in_cents: The alcohol price per liter
    primary_category: Primary product stock category
    producer_name: Name of the company that produces the product
    product_no: The LCBO product ID / number [Deprecated]
    regular_price_in_cents: Regular retail price in cents
    released_on: Official release date (usually unspecified)
    secondary_category: Secondary LCBO product stock category (Not all products have one.)
    serving_suggestion: LCBO serving suggestion (not available for all products)
    stock_type: Either "LCBO" or "VINTAGES"
    sugar_content: The sugar content designation, can be a residual sugar number or designation such as extra-dry (XD), medium sweet (MS), etc.
    tags: A string of tags that reflect the product
    tasting_note: Professional tasting note (not available for all products)
    total_package_units: Number of units in a package
    total_package_volume_in_milliliters: Total volume of all units in package
    updated_at: Time that the product information was updated
    value_added_promotion_description: Contents of the value added promotion offer if available
    volume_in_milliliters: Total volume of all units in package [Deprecated]
  :body:

- :title: Products at Store
  :route: /stores/:store_id/products
  :examples:
  - :path: /stores/511/products
    :desc: All products available at store #511
  - :path: /stores/511/products?where=is_vqa
    :desc: All VQA products at store #511

Store Resources:
- :title: Stores with Product
  :route: /products/:product_id/stores
  :examples:
  - :path: /products/18/stores
    :desc: Stores that stock product #18

- :title: Stores
  :route: /stores
  :examples:
  - :path: /stores
    :desc: All stores

- :title: Store
  :route: /stores/:store_id
  :examples:
  - :path: /stores/511
    :desc: Store #511
  :pairs:
    address_line_1: Street address
    address_line_2: Secondary address information (Not all stores)
    city: City the store is in
    fax: Fax number (not all stores have one)
    has_beer_cold_room: True if the store has a walk-in beer fridge
    has_bilingual_services: True if the store has bilingual services
    has_parking: True if the store has a parking lot
    has_product_consultant: True if the store has a product consultant on staff
    has_special_occasion_permits: True if the store can issue special occasion permits
    has_tasting_bar: True if the store has a tasting bar
    has_transit_access: True if the store is accessible by public transit
    has_vintages_corner: True if the store has a Vintages area
    has_wheelchair_accessability: True if the store can be entered via wheelchair
    id: LCBO store number
    inventory_count: Total inventory units at the store
    inventory_price_in_cents: Total retail value of all products at the store
    inventory_volume_in_milliliters: Total volume of all products at the store
    is_dead: When a store is removed from the store catalog it is marked as "dead"
    latitude: Reported latitude
    longitude: Reported longitude
    name: Official LCBO store name
    postal_code: Postal code
    products_count: Total unique products at the store
    store_no: LCBO store number [Deprecated]
    "[sunday..monday]_close": Minutes since midnight that the store closes
    "[sunday..monday]_open": Minutes since midnight that the store opens
    tags: A string of tags that reflect the store
    telephone: Telephone number
    updated_at: Time that the store information was updated

Inventory Resources:
- :title: Inventories
  :route: /inventories
  :examples:
  - :path: /inventories
    :desc: All inventories

- :title: Inventory
  :route: /stores/:store_id/products/:product_id/inventory
  :examples:
  - :path: /stores/511/products/18/inventory
    :desc: Inventory of product 18 at store 511
  :pairs:
    product_id: Product ID
    store_id: Store ID
    is_dead: True if this inventory refers to a dead store and/or product
    quantity: Reported quantity on hand of the product ID at store ID
    updated_on: Reported date that quantity was updated
    updated_at: Time that this inventory item was updated
    product_no: Product ID [Deprecated]
    store_no: Store ID [Deprecated]
  :body: |
    An inventory reflects the quantity of a product at a store, the
    reported quantity is an estimate, quantities for seasonal and discontinued
    products are also often inaccurate due to increased demand. This result
    includes store and product resources as well.

- :title: Product Inventories
  :route: /products/:product_id/inventories
  :examples:
  - :path: /products/18/inventories
    :desc: All inventories for product 18

History Resources:
- :title: Product History
  :route: /products/:product_id/history
  :examples:
  - :path: /products/18/history
    :desc: History for product 18
  :body: |
    Certain product fields are tracked over time and can be accessed.
  
- :title: Store History
  :route: /stores/:store_id/history
  :examples:
  - :path: /stores/511/history
    :desc: History for store 511
  :body: |
    Certain store fields are tracked over time and can be accessed.

- :title: Inventory History
  :route: /stores/:store_id/products/:product_id/history
  :examples:
  - :path: /stores/511/products/18/history
    :desc: Inventory history for product 18 at store 511
  :body: |
    Inventories are tracked over time for every product at every store.
